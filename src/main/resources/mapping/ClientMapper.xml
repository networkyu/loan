<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.loan.dao.ClientMapper">
  <resultMap id="BaseResultMap" type="com.loan.dataobject.Client">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="tel" jdbcType="VARCHAR" property="tel" />
    <result column="e_mail" jdbcType="VARCHAR" property="eMail" />
    <result column="identity_number" jdbcType="VARCHAR" property="identityNumber" />
  </resultMap>
  <sql id="Base_Column_List">
    id, name, tel, e_mail, identity_number
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from client
    where id = #{id,jdbcType=INTEGER}
  </select>
<!--查询所有用户的id并以数组的形式返回-->
  <select id="selectId" parameterType="java.lang.Integer" resultType="java.lang.Integer">
    select
    id
    from client
  </select>

    <!--通过用户id查询姓名-->
    <select id="selectName" parameterType="java.lang.Integer" resultType="java.lang.String">
        select
        name
        from client where id = #{id,jdbcType=INTEGER}
    </select>
  <!--通过起始id和限制条数返回结果-->
  <select id="selectByMaxIdAndLimit" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select
    *
    from client where id > #{arg0} limit #{arg1}
  </select>
  <!--通过开始行后取limit条数据-->
  <select id="selectByStartRowAndLimit" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select
    *
    from client limit #{arg0},#{arg1}
  </select>
  <!--查询用户总数-->
  <select id="selectCountId" resultType="java.lang.Integer">
    select
    count(id)
    from client
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from client
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.loan.dataobject.Client">
    insert into client (id, name, tel, 
      e_mail, identity_number)
    values (#{id,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, #{tel,jdbcType=VARCHAR}, 
      #{eMail,jdbcType=VARCHAR}, #{identityNumber,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.loan.dataobject.Client">
    insert into client
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="tel != null">
        tel,
      </if>
      <if test="eMail != null">
        e_mail,
      </if>
      <if test="identityNumber != null">
        identity_number,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="tel != null">
        #{tel,jdbcType=VARCHAR},
      </if>
      <if test="eMail != null">
        #{eMail,jdbcType=VARCHAR},
      </if>
      <if test="identityNumber != null">
        #{identityNumber,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.loan.dataobject.Client">
    update client
    <set>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="tel != null">
        tel = #{tel,jdbcType=VARCHAR},
      </if>
      <if test="eMail != null">
        e_mail = #{eMail,jdbcType=VARCHAR},
      </if>
      <if test="identityNumber != null">
        identity_number = #{identityNumber,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.loan.dataobject.Client">
    update client
    set name = #{name,jdbcType=VARCHAR},
      tel = #{tel,jdbcType=VARCHAR},
      e_mail = #{eMail,jdbcType=VARCHAR},
      identity_number = #{identityNumber,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>